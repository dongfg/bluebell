// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/dongfg/bluebell/internal/config"
	"github.com/dongfg/bluebell/internal/controller"
	"github.com/dongfg/bluebell/internal/middleware"
	"github.com/dongfg/bluebell/internal/service"
	"github.com/gin-gonic/gin"
	"github.com/gobuffalo/packr/v2"
	"net/http"
)

// Injectors from wire.go:

func initConfig() (*config.Config, error) {
	configConfig := config.New()
	return configConfig, nil
}

func initController(conf *config.Config, r *gin.Engine) (*controller.Controller, error) {
	healthServiceOptions := &service.HealthServiceOptions{
		Conf: conf,
	}
	healthService := service.NewHealthService(healthServiceOptions)
	totpService := service.NewTotpService()
	seriesServiceOptions := &service.SeriesServiceOptions{
		Conf: conf,
	}
	seriesService := service.NewSeriesService(seriesServiceOptions)
	options := &controller.Options{
		Router:        r,
		HealthService: healthService,
		TotpService:   totpService,
		SeriesService: seriesService,
	}
	controllerController := controller.New(options)
	return controllerController, nil
}

// wire.go:

// initRouter init gin router and register controller
func initRouter(conf *config.Config) *gin.Engine {
	r := gin.Default()
	box := packr.New("static", "../../static")
	r.GET("/", func(c *gin.Context) {
		src, _ := box.Find("index.html")
		c.Data(http.StatusOK, "text/html; charset=utf-8", src)
	})
	r.GET("/swagger.yml", func(c *gin.Context) {
		src, _ := box.Find("swagger.yml")
		c.Data(http.StatusOK, "text/vnd.yaml; charset=utf-8", src)
	})
	r.Use(middleware.RateLimit())
	return r
}
